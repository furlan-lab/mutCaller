#############################################
### mutcaller pipeline
#############################################




#!/bin/bash

###################################### Help ################################################
Help()
{
   # Display Help
   echo
   echo "Syntax: mutcaller [-b -t -d -c -u -B -U -l -q -i -e -g -o -p]"
   echo "options:"
   echo "   -h     Print this Help."
   echo "   -b     cell barcode and UMI fastq.gz full path and name"
   echo "   -t     sequence fastq.gz full path and name"
   echo "   -d     working directory for analysis"
   echo "   -c     skip barcode correction"
   echo "   -u     skip UMI correction"
   echo "	-B		 cell barcode length (default is 16) barcode must be placed before UMI"  
   echo "	-U		 UMI length (default is 12) UMI must be placed after barcode"
   echo "   -l     optional txt.gz list of allowed barcodes for correction (default is 10x 3' v3 list)"
   echo "   -q     quality score threshold (default is 25)"
   echo "   -i     cluster identity threshold (default is 0.9)"
   echo "   -e     max error for consensus (default is 0.5)"
   echo "   -g     max gap for consensus (default is 0.5)"
   echo "   -o     organism (default is human, other options: mouse, rhesus_monkey)"
   echo "   -p     number of processors"

}

################################ Default variables ########################################
# SCRIPT_PATH="${BASH_SOURCE}"
# while [ -L "${SCRIPT_PATH}" ]; do
#   SCRIPT_DIR="$(cd -P "$(dirname "${SCRIPT_PATH}")" >/dev/null 2>&1 && pwd)"
#   SCRIPT_PATH="$(readlink "${SCRIPT_PATH}")"
#   [[ ${SCRIPT_PATH} != /* ]] && SCRIPT_PATH="${SCRIPT_DIR}/${SCRIPT_PATH}"
# done
# SCRIPT_PATH="$(readlink -f "${SCRIPT_PATH}")"
# ScriptDir="$(cd -P "$(dirname -- "${SCRIPT_PATH}")" >/dev/null 2>&1 && pwd)"
ScriptDir=/home/sfurlan/develop/mutCaller  ####This needs to be fixed
BaseFolder=$(pwd)
CorrectBC=true
CorrectUMI=true
BClength=16
UMIlength=12
MyBCList="${ScriptDir}/data/3M-february-2018.txt.gz"
MyQScore=25
MyIdentity=0.9
MyMaxError=0.5
MyMaxGap=0.5
MyOrganism="human"
MyCoreNumber=1

####################################### Options ###########################################

while getopts ":hb:t:d:cuB:U:l:q:i:e:g:o:p:" option; do
   case $option in
      h) # display Help
         Help
         exit;;
      b) 
         BCfastq=$OPTARG;;
      t) 
         MUTfastq=$OPTARG;;
      d) 
         BaseFolder=$OPTARG;;
      c) 
         CorrectBC=false;;
      u) 
         CorrectUMI=false;;
      B)
         BClength=$OPTARG;;
      U)
         UMIlength=$OPTARG;;
      l)
         MyBCList=$OPTARG;;
      q) 
         MyQScore=$OPTARG;;
      i) 
         MyIdentity=$OPTARG;;
      e) 
         MyMaxError=$OPTARG;;
      g) 
         MyMaxGap=$OPTARG;; 
      o) 
         MyOrganism=$OPTARG;; 
      p) 
         MyCoreNumber=$OPTARG;;
      :)    # If expected argument omitted:
         echo "Error: -${OPTARG} requires an argument."
         exit;;
      \?) # Invalid option
         echo "Error: Invalid option $OPTARG. Try mutcaller -h"
         exit;;
   esac
done

################ mandatory arguments ################################
if [ ! "$BCfastq" ] || [ ! "$MUTfastq" ]; then
  echo "arguments -b and -t must be provided"
  Help
  exit
fi
######################################################################


# create folders
if [ ! -e ${BaseFolder}/fastq_processed/ ]; then
	mkdir ${BaseFolder}/fastq_processed/
fi

if [ ! -e ${BaseFolder}/mutcaller/ ]; then
	mkdir ${BaseFolder}/mutcaller/
	mkdir ${BaseFolder}/mutcaller/QC/
fi

# echo "BCfastq = ${BCfastq}" 
# echo "BCfastq = ${BCfastq}" 
# echo "MUTfastq = ${MUTfastq}" 

# Log file 
touch ${BaseFolder}/mutcaller/mutcaller.log
echo "ScriptDir: ${ScriptDir}" 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log
echo "BaseFolder: ${BaseFolder}" 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log
echo "REFORMATING FASTQ FILES" 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log

# Metrics table
touch ${BaseFolder}/mutcaller/mutcallerMetrics.txt
echo -e "Step\tReadNumber" > ${BaseFolder}/mutcaller/mutcallerMetrics.txt
# Rearrange Fastq --------------------------------
cd ${BaseFolder}/fastq_processed/

## Get Cell barcode + UMI
zcat ${BCfastq} | awk 'NR%4==2' > "BCSeq.txt"

## Cell Barcode + UMI quality
zcat ${BCfastq} | awk 'NR%4==0' > "BCQC.txt"

## Get MUT sequence
zcat ${MUTfastq} | awk 'NR%4==2' > "MUTSeq.txt" 

## Get MUT quality 
zcat ${MUTfastq} | awk 'NR%4==0' > "MUTQC.txt"  

## Get header 
zcat ${BCfastq} | awk 'NR%4==1' | awk 'BEGIN{FS=" "};{print $1};END{}' > "seqHeaders.txt" 

## Add BC - UMI to header
paste -d ":" "seqHeaders.txt" "BCSeq.txt"  > "seqHeaders_BC.txt"

## Add qualHeader (line 3)
sed 's~@~+~' "seqHeaders.txt" > "qualHeaders.txt"

# initial number of reads
nr=$(cat BCSeq.txt|wc -l)
echo -e "Sequenced Reads\t${nr}" >> ${BaseFolder}/mutcaller/mutcallerMetrics.txt

## Correct barcodes
if [ ${CorrectBC} = true ]; then
	echo "CORRECTING BARCODES" 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log
	${ScriptDir}/scripts/CorrectBC.py -b BCSeq.txt  \
					 -w ${MyBCList} \
					 -d 1 \
					 -l ${BClength} \
					 -r ${MyCoreNumber} \
					 -o BCcorrected 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log
	## extract UMIs and join to corrected barcodes
	mystart=$((BClength + 1))
	QCend=$((BClength + $UMIlength))
	cat BCSeq.txt | awk -v mystart=$mystart -v myend=$UMIlength '{print substr($0,mystart,myend)}' > UMI.txt
	paste -d '' BCcorrected.txt UMI.txt > BCcorrectedUMI.txt
	cat BCQC.txt | awk -v mystart=1 -v myend=$QCend '{print substr($0,mystart,myend)}' > BCQCadj.txt

	## Mask every UMI with no valid barcode
	nbc=$(printf 'N%.0s' $(seq 1 $BClength))
	ntotal=$(printf 'N%.0s' $(seq 1 $(($BClength + $UMIlength))))
	cat BCcorrectedUMI.txt | sed "/$nbc/c$ntotal" > BCcorrectedUMImasked.txt 
	
	## Correct UMIs
	if [ ${CorrectUMI} = true ]; then
		echo "CORRECTING UMI" 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log
		${ScriptDir}/scripts/CorrectUMI.py -b BCcorrectedUMImasked.txt \
						  -B ${BClength} \
						  -U ${UMIlength} \
						  -o UMIcorrected 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log
		## Join corrected BC and UMI
		paste -d '' BCcorrected.txt UMIcorrected.txt > BCSeq_final.txt

	fi

	## Or skip UMI correction
	if [ ${CorrectUMI} = false ]; then
		echo "SKIPPING CORRECTING UMI" 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log
		mv BCcorrectedUMImasked.txt BCSeq_final.txt

	fi

fi

## Skip barcode correction
if [ ${CorrectBC} = false ]; then
	echo "SKIPPING CORRECTING BARCODES" 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log
	QCend=$((BClength + $UMIlength))
	cat BCQC.txt | awk -v mystart=1 -v myend=$QCend '{print substr($0,mystart,myend)}' > BCQCadj.txt

	## Correct UMIs
	if [ ${CorrectUMI} = true ]; then
		echo "CORRECTING UMI" 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log
		${ScriptDir}/scripts/CorrectUMI.py -b BCSeq.txt \
						  -B ${BClength} \
						  -U ${UMIlength} \
						  -o UMIcorrected 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log
		# Extract BC
		cat BCSeq.txt | awk -v myend=$BClength '{print substr($0,0,myend)}' > BC.txt
		# Join BC and corrected UMI
		paste -d '' BC.txt UMIcorrected.txt > BCSeq_final.txt

	fi

	## Or skip UMI correction
	if [ ${CorrectUMI} = false ]; then
		echo "SKIPPING CORRECTING UMI" 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log
		cp BCSeq.txt BCSeq_final.txt

	fi

fi

## New fastq
paste -d '' BCSeq_final.txt MUTSeq.txt > Read1.txt
paste -d '' BCQCadj.txt MUTQC.txt > Read1_Q.txt
paste -d '\n' seqHeaders.txt Read1.txt qualHeaders.txt Read1_Q.txt > sample.fastq

## Remove reads with NNNN...N in BC + UMI
ntotal=$(printf 'N%.0s' $(seq 1 $(($BClength + $UMIlength))))
ntotal=$(echo "^$ntotal")
cat sample.fastq | paste - - - - | awk -v ntotal=$ntotal -F '\t' '{if ($2 !~ntotal){ print $0}}'| tr "\t" "\n" > sample_filtered.fastq


echo -e "Done for now!"

# # number of reads
# nr=$(echo $(cat sample_filtered.fastq|wc -l)/4|bc)
# echo -e "Barcode Correction\t${nr}" >> ${BaseFolder}/mutcaller/mutcallerMetrics.txt

# mv sample_filtered.fastq ${BaseFolder}/mutcaller/

# ### --------------------------------------------------------------------------

# cd ${BaseFolder}/mutcaller/

# # 1) Find barcodes and convert them in tag
# # MaskPrimers extract => look for the barcodes in a fixed sequence region
# 	# -s: input fastq
# 	# --start: starting position of the sequence to extract
# 	# --len: lenght of the sequence to extract
# 	# --pf: name for the resulting tag containing the barcode
# 	# --mode cut: remove barcode region from sequence
# 	# --failed: creates file containing records that failed

# mylength=$(($BClength + $UMIlength))
# MaskPrimers.py extract -s sample_filtered.fastq --start 0 --len ${mylength} --pf BARCODE --mode cut --failed --log MP.log --nproc ${MyCoreNumber} 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log

# # Count Ns per line
# cat sample_filtered_primers-pass.fastq | awk 'NR%4==2' | grep -o -n 'N' | cut -d : -f 1 | uniq -c > QC/ns.txt

# # Q average score per read
# cat sample_filtered_primers-pass.fastq | perl -ne 'chomp;print;<STDIN>;<STDIN>;$_ = <STDIN>;map{ $score += ord($_)-33} 
# split(""); print " " .($score/length($_))."\n";$score=0;' > QC/qscore.txt

# ## QC Plots: N number and Q score
# ${ScriptDir}/scripts/QCplots_preFiltering.r $BaseFolder

# # 2) Quality filter
# 	# -q: quality score threshold
# 	# -s: input fastq	
# 	# --failed: creates file containing records that failed

# FilterSeq.py quality -q ${MyQScore} -s sample_filtered_primers-pass.fastq --failed --log FS.log --nproc ${MyCoreNumber} 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log

# # number of reads
# nr=$(cat sample_filtered_primers-pass_quality-pass.fastq|echo $((`wc -l`/4)))
# echo -e "Qscore filtering\t${nr}" >> ${BaseFolder}/mutcaller/mutcallerMetrics.txt


# # 3) Cluster sequences with same BC+UMI => discard products of barcode swapping
# 	# -s: input sequence
# 	# -f: annotation field used for grouping
# 	# -k: output field name
# 	# --ident: sequence identity threshold for the uclust algorithm

# echo -e "Done for now!"

# # ClusterSets.py set -s sample_filtered_primers-pass_quality-pass.fastq -f BARCODE -k CLUSTER --log CS.log --failed --ident ${MyIdentity} --exec /usr/local/bin/usearch --nproc ${MyCoreNumber} 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log

# # # Join BARCODE and CLUSTER header tags
# # ParseHeaders.py merge -s sample_filtered_primers-pass_quality-pass_cluster-pass.fastq -f BARCODE CLUSTER -k BARCODE_CLUSTER --delim "|" "=" "_" 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log

# # # Extract BC + UMI + cluster
# # cat sample_filtered_primers-pass_quality-pass_cluster-pass_reheader.fastq | awk 'NR%4==1' | awk 'BEGIN{FS="="};{print $4};END{}' > "${BaseFolder}/fastq_processed/BCSeq_final_filtered_qfiltered_cluster.txt" 

# # ## QC plots: cluster proportion and ratio
# # ${ScriptDir}/scripts/QCplots_clustering.r $BaseFolder $BClength $UMIlength

# # # 4) Determines consensus for each BC/UMI
# # 	# -s: input fastq	
# # 	# --bf: tag by which to group sequences
# # 	# -n: minimun number of sequences required to define a consensus
# # 	# --maxerror: calculate error rate (number of missmatches) per consensus and remove groups exceding the given value
# # 	# --maxgap: frequency of allowed gap values for each position. Positions exceeding the threshold are deleted from the consensus

# # BuildConsensus.py -s sample_filtered_primers-pass_quality-pass_cluster-pass_reheader.fastq  --bf BARCODE_CLUSTER -n 3 --maxerror ${MyMaxError} --maxgap ${MyMaxGap} --outname consensus --log BC.log --failed --nproc ${MyCoreNumber} 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log

# # nreads=$(cat  BC.log | grep "SEQCOUNT" | awk -F " " '{sum+=$2};END{print sum}')   ## count number of sequences reviewed

# # echo "Reads used for consensus building: ${nreads}" 2>&1 | tee -a ${BaseFolder}/mutcaller/mutcaller.log

# # # convert consensus fastq into fasta
# # paste - - - - < consensus_consensus-pass.fastq | cut -f 1,2 | sed 's/^@/>/' | tr "\t" "\n" > sample.fa


